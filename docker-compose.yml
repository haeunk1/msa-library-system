version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    

  kafka-2:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka-2
    ports:
      - "9093:9093"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    

  kafka-3:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka-3
    ports:
      - "9094:9094"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    
  # kafka:
  #   image: confluentinc/cp-kafka:7.0.1
  #   container_name: kafka
  #   ports:
  #     - "9093:9092"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    depends_on:
    - kafka
    - kafka-2
    - kafka-3
    environment:
      KAFKA_CLUSTERS_0_NAME: local-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092,kafka-2:9093,kafka-3:9094
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpw
      MYSQL_DATABASE: msa_db
      MYSQL_USER: msa_user
      MYSQL_PASSWORD: msa_pw
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql

  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo

  discovery-server:
    build:
      context: ./discovery-server
    container_name: discovery-server
    ports:
      - "8761:8761"
    depends_on:
      - kafka
      - kafka-2
      - kafka-3
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  api-gateway-service:
    build:
      context: ./api-gateway-service
    container_name: api-gateway-service
    ports:
      - "9001:9001"
    depends_on:
      - discovery-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  member-service:
    build:
      context: ./member-service
    container_name: member-service
    ports:
      - "8011:8011"
    depends_on:
      - mysql
      - kafka
      - kafka-2
      - kafka-3
      - discovery-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  book-service:
    build:
      context: ./book-service
    container_name: book-service
    ports:
      - "8012:8012"
    depends_on:
      - mysql
      - kafka
      - kafka-2
      - kafka-3
      - discovery-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  book-query-service:
    build:
      context: ./book-query-service
    container_name: book-query-service
    ports:
      - "8013:8013"
    depends_on:
      - mongodb
      - kafka
      - kafka-2
      - kafka-3
      - discovery-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  # rental-service:
  #   build:
  #     context: ./rental-service
  #   container_name: rental-service
  #   ports:
  #     - "8014:8014"
  #   depends_on:
  #     - mysql
  #     - kafka
  #     - kafka-2
  #     - kafka-3
  #     - discovery-server

volumes:
  mysql_data:
  mongo_data: